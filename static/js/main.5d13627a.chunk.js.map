{"version":3,"sources":["api/api.ts","bll/usersReducer.ts","ui/startPage.tsx","App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","api","post","initialState","id","isFetching","usersReducer","state","action","type","status","StartPage","dispatch","useDispatch","className","onClick","then","response","data","userId","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","users","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yQAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,4CAGAC,EAAK,WAEV,OAAOJ,EAASK,KAAK,SCQvBC,EAA2B,CAC7BC,GAAI,EACJC,YAAY,GA6BDC,EAzBM,WAAoE,IAAnEC,EAAkE,uDAA9CJ,EAAcK,EAAgC,uCACpF,OAAQA,EAAOC,MACX,IArBU,YAuBN,OAAO,eACAF,EADP,CAEIH,GAAII,EAAOJ,GACXC,WAA8B,SAAlBG,EAAOE,SAI/B,OAAOH,GCbII,MAff,WAEI,IAAMC,EAAWC,cAMjB,OACI,yBAAKC,UAAU,OACX,4BAAQC,QANO,WACnBH,GD8BG,SAACA,GACJX,IAAce,MAAK,SAAAC,GAJX,IAACb,EAAYM,EAKjBE,GALKR,EAKYa,EAASC,KAAKC,OALdT,EAKsBO,EAASC,KAAKR,OALP,CAACD,KAlCzC,YAkC0DL,KAAIM,oBCtBpE,iCCHGU,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdAC,EAAcC,YAAgB,CAChCC,MAAOtB,IAOIuB,EAFDC,YAAYJ,EAAaK,YAAgBC,MCDvDC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEFM,SAASC,eAAe,SF8HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d13627a.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://vast-sands-32724.herokuapp.com/\",\r\n})\r\n\r\nexport const api ={\r\n    getUser () {\r\n        return instance.post('user')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {api} from '../api/api'\r\n\r\nconst SET_USERS = 'SET_USERS'\r\n\r\ninterface IUserState {\r\n    id: number,\r\n    isFetching: boolean\r\n}\r\n\r\ninterface IAction {\r\n    type: typeof SET_USERS\r\n    id: number\r\n    status: string\r\n}\r\n\r\nconst initialState: IUserState = {\r\n    id: 0,\r\n    isFetching: false\r\n}\r\n\r\n\r\nconst usersReducer = (state: IUserState = initialState, action: IAction): IUserState => {\r\n    switch (action.type) {\r\n        case SET_USERS: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                isFetching: action.status === 'wait'\r\n            }\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nconst setUser = (id: number, status: string): IAction => ({type: SET_USERS, id, status})\r\n\r\nexport const getUserTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        api.getUser().then(response => {\r\n            dispatch(setUser(response.data.userId, response.data.status))\r\n        })\r\n    }\r\n}\r\n\r\nexport default usersReducer","import React from 'react';\r\n// import './App.css';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getUserTC} from '../bll/usersReducer'\r\n\r\nfunction StartPage() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startSearching = () => {\r\n        dispatch(getUserTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <button onClick={startSearching}>Start a random conversation</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;","import React from 'react';\nimport './App.css';\nimport StartPage from \"./ui/startPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StartPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport usersReducer from \"./usersReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}