{"version":3,"sources":["api/api.ts","bll/usersReducer.ts","ui/startPage/startPage.tsx","ui/chatPage/inputPanelComponent.tsx","ui/chatPage/chatPage.tsx","App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","api","post","userId","get","chatId","message","initialState","isFetching","messages","setUserInChat","status","type","sendMessageTC","dispatch","getState","users","then","response","usersReducer","state","action","StartPage","useState","intervalId","changeIntervalId","useSelector","store","useDispatch","useEffect","clearInterval","setInterval","data","to","className","onClick","disabled","InoutPanel","newMessage","onChange","e","currentTarget","value","ChatPage","App","render","patch","Boolean","window","location","hostname","match","rootReducer","combineReducers","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6459d878.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://vast-sands-32724.herokuapp.com/\",\r\n})\r\n\r\nexport type IMessage = {\r\n    message: string;\r\n    userId: number;\r\n    date: string;\r\n}\r\n\r\nexport const api ={\r\n    setUser () {\r\n        return instance.post<{userId: number, status: string}>('user')\r\n    },\r\n    getUser (userId: number) {\r\n        return instance.get<{chatId: number, status: string}>(`user?userId=${userId}`)\r\n    },\r\n    getMessages (userId: number, chatId: number, lastMessageDate: string) {\r\n        return instance.get<{messages: IMessage[], status: string}>(`message?userId=${userId}&chatId=${chatId}&date=${lastMessageDate}`)\r\n    },\r\n    sendMessage (userId: number, chatId: number, message: string) {\r\n        debugger\r\n        return instance.post<{status: string}>('message', {userId, chatId, message})\r\n    },\r\n}","import {Dispatch} from \"redux\";\r\nimport {api, IMessage} from '../api/api'\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst SET_USER = 'SET_USER'\r\nconst SET_USER_IN_CHAT = 'SET_USER_IN_CHAT'\r\nconst SET_MESSAGES = 'SET_MESSAGES'\r\n\r\ninterface IUserState {\r\n    userId: number\r\n    isFetching: boolean\r\n    chatId: number\r\n    messages: IMessage[]\r\n}\r\n\r\ninterface IActionSetUser {\r\n    type: typeof SET_USER\r\n    userId: number\r\n    status: string\r\n}\r\n\r\ninterface IActionUserSetInChat {\r\n    type: typeof SET_USER_IN_CHAT\r\n    status: string\r\n    chatId: number\r\n}\r\n\r\ninterface IActionUserSetMessages {\r\n    type: typeof SET_MESSAGES\r\n    status: string\r\n    messages: IMessage[]\r\n}\r\n\r\n\r\nconst initialState: IUserState = {\r\n    userId: 0,\r\n    isFetching: false,\r\n    chatId: 0,\r\n    messages: [],\r\n}\r\n\r\ntype IActions = IActionSetUser | IActionUserSetInChat | IActionUserSetMessages\r\n\r\n\r\nconst usersReducer = (state: IUserState = initialState, action: IActions): IUserState => {\r\n    switch (action.type) {\r\n        case SET_USER: {\r\n            return {\r\n                ...state,\r\n                userId: action.userId,\r\n                isFetching: action.status === 'wait',\r\n                messages: [],\r\n            }\r\n        }\r\n        case SET_USER_IN_CHAT: {\r\n            return {\r\n                ...state,\r\n                chatId: action.chatId,\r\n                isFetching: !(action.status === 'found' || action.status === '1qaz2wsx3edc'),\r\n            }\r\n        }\r\n        case SET_MESSAGES: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.messages],\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return state\r\n}\r\n\r\n\r\nconst postUser = (userId: number, status: string): IActionSetUser => ({type: SET_USER, userId, status})\r\nconst setUserInChat = (status: string, chatId: number): IActionUserSetInChat => ({type: SET_USER_IN_CHAT, status, chatId})\r\nconst setMessages = (status: string, messages: IMessage[]): IActionUserSetMessages => ({type: SET_MESSAGES, status, messages})\r\n\r\nexport const setUserTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        api.setUser().then(response => {\r\n            dispatch(postUser(response.data.userId, response.data.status))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserTC = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        api.getUser(getState().users.userId).then(response => {\r\n            dispatch(setUserInChat(response.data.status, response.data.chatId))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getMessagesTC = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        const users = getState().users;\r\n        const date = '' + (users.messages.length && users.messages[users.messages.length - 1].date);\r\n        api.getMessages(users.userId, users.chatId, date).then(response => {\r\n            dispatch(setMessages(response.data.status, response.data.messages))\r\n        })\r\n    }\r\n}\r\nexport const sendMessageTC = (message: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        const users = getState().users;\r\n        api.sendMessage(users.userId, users.chatId, message).then(response => {\r\n            {\r\n                message === '1qaz2wsx3edc' && dispatch(setUserInChat('1qaz2wsx3edc', 0))\r\n            }\r\n            // dispatch(setUserInChat(response.data.status, response.data.chatId))\r\n        })\r\n    }\r\n}\r\n\r\nexport default usersReducer","import React, {useEffect, useState} from 'react';\r\n// import './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserTC, setUserTC} from '../../bll/usersReducer'\r\nimport { AppStateType } from '../../bll/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nfunction StartPage() {\r\n\r\n    let [intervalId, changeIntervalId] = useState()\r\n    let isFetching = useSelector((store: AppStateType) => store.users.isFetching)\r\n    let chatId = useSelector((store: AppStateType) => store.users.chatId)\r\n    const dispatch = useDispatch()\r\n\r\n    const startSearching = () => {\r\n        dispatch(setUserTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        clearInterval(intervalId)\r\n        if (isFetching) {\r\n            changeIntervalId(setInterval(() => {\r\n                dispatch(getUserTC())\r\n            }, 1000))\r\n        }\r\n        return () => clearInterval(intervalId)\r\n    }, [isFetching])\r\n\r\n    if (chatId) {\r\n        return <Redirect to={'/chat_page'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <button onClick={startSearching} disabled={isFetching}>Start a random conversation</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessageTC} from \"../../bll/usersReducer\";\r\n\r\n\r\nfunction InoutPanel() {\r\n\r\n    const [message, newMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const changeMessage = (e: ChangeEvent<HTMLInputElement>) => {\r\n        newMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        newMessage('')\r\n        dispatch(sendMessageTC(message))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input onChange={changeMessage} value={message}/>\r\n            <button onClick={sendMessage}>SEND</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InoutPanel;","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport InoutPanel from \"./inputPanelComponent\";\r\nimport {sendMessageTC} from \"../../bll/usersReducer\";\r\n\r\nfunction ChatPage() {\r\n\r\n    let chatId = useSelector((store: AppStateType) => store.users.chatId)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (!chatId) {\r\n        return <Redirect to={'/start_page'}/>\r\n    }\r\n\r\n    const logOutOfChat = () => {\r\n        dispatch(sendMessageTC('1qaz2wsx3edc'))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <button onClick={logOutOfChat}>out</button>\r\n            <InoutPanel/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage;","import React from 'react';\r\nimport './App.css';\r\nimport StartPage from \"./ui/startPage/startPage\";\r\nimport ChatPage from \"./ui/chatPage/chatPage\";\r\nimport {Route} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route render={ () => <StartPage/>} patch={'/start_page'}/>\r\n      <Route render={ () => <ChatPage/>} patch={'/chat_page'}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport usersReducer from \"./usersReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./bll/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}